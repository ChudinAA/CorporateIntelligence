### **Цель проекта**
Разработать AI-платформу для поиска информации в данных компании, которая будет поддерживать взаимодействие с пользователями через чат в режиме реального времени. Платформа должна использовать локальную LLM (Llama3.1:8b) и подход RAG (Retrieval-Augmented Generation) для извлечения данных из документов, приложений и баз данных компании с целью более точных и релевантных ответов на вопросы пользователей.

### **Основные функции платформы**

1. **Регистрация и авторизация пользователей**
   - Пользователи должны иметь возможность зарегистрироваться и авторизоваться на платформе.
   - Информация о пользователе (например, роль, настройки) должна сохраняться в базе данных.

2. **Чат с AI-агентом**
   - Пользователи могут задавать вопросы в чат, в котором работает AI-агент.
   - AI-агент должен предоставлять ответы, основанные на информации, хранящейся в документах, приложениях и базах данных компании.
   - AI-агент должен использовать LLM Llama3.1:8b в связке с подходом RAG для поиска и генерации релевантных ответов.

3. **Загрузка документов и использование их в поиске**
   - Пользователи могут загружать документы в чат для конкретизации запроса.
   - Загрузка должна поддерживать различные форматы документов (например, PDF, txt, DOCX, xlsx, csv, и другие популярные).
   - Документы должны индексироваться и сохраняться в векторной базе данных для использования в поиске.

4. **Контекст и история чатов**
   - Платформа должна сохранять ключевые моменты последней сессии с пользователем в виде краткого резюме, генерируемого LLM при стирании диалога в чате или выходе пользователя из системы.
   - Краткое резюме последней сессии должно генерироваться автоматически с помощью LLM, сохраняться в БД и показываться при последующем заходе пользователя в систему.
   - История кратких резюме должна храниться в базе данных, обеспечивая контекст для последующих сессий.

5. **Поиск по векторной базе данных**
   - Использовать подход RAG для сохранения данных компании в векторной БД.
   - Поиск должен использовать как данные из документов, так и внешние источники (например, базы данных, API компании).
   - Ответы должны быть точно настроены на доменную область компании.

6. **Модульность и контейнеризация**
   - Архитектура платформы должна быть модульной, с возможностью упаковки в Docker контейнеры.
   - Модули должны быть легко масштабируемыми и изолированными друг от друга.
   - Платформа должна быть совместима с развертыванием как на локальных серверах, так и в облаке.

7. **Масштабируемость и переиспользуемость**
   - Все компоненты должны быть спроектированы с учетом масштабируемости.
   - Архитектура должна поддерживать горизонтальное масштабирование.
   - Код должен быть разделен на повторно используемые компоненты для быстрого расширения функционала.

8. **Безопасность**
   - Данные пользователей и компании должны быть защищены с использованием современных стандартов безопасности.
   - Включить механизм аутентификации и авторизации с поддержкой RBAC (Role-Based Access Control).
   - Обеспечить безопасное хранение данных, включая шифрование чувствительной информации.

### **Технические требования**

1. **Технологический стек**
   - **Языки программирования:** Python (основной язык разработки).
   - **Фреймворки:** Flask/Django для создания API, FastAPI для высокоскоростных операций.
   - **LLM:** Llama3.1:8b (локальная модель).
   - **Механизм поиска:** Использование RAG подхода для интеграции с векторной базой данных (например, FAISS, Pinecone, Chroma).
   - **Базы данных:** PostgreSQL для хранения метаданных, Векторная база данных для хранения индексированных данных.
   - **Безопасность:** OAuth 2.0 для аутентификации, HTTPS для защиты передачи данных, шифрование данных на уровне базы данных.

2. **Архитектура системы**
   - **Frontend:** Интерфейс чата с AI-агентом (можно использовать React для построения UI).
   - **Backend:** Модуль обработки запросов, обработки документов, генерации ответов через LLM.
   - **API для интеграций:** RESTful API для взаимодействия с внешними системами (например, базы данных и приложения компании).
   - **Документы и базы данных:** Векторизация и индексация загруженных документов для их быстрого поиска через LLM.

3. **Масштабируемость**
   - Использование горизонтального масштабирования для обработки большого числа запросов.
   - Система должна быть готова к высокой нагрузке при росте числа пользователей и объема данных.